#2
"""
for N in range(1,1000):
    R=bin(N)[2:]
    if N%2==0:
        R=R+'10'
    else:
        R='1'+R+'00'
    R=int(R,2)
    if R>107:
        print(N)"""
#4
#1Кбайт = 1024 байт = 1024*8 бит
#1Мбайт = 1024Кбайт = 1024*1024 байт = 1024*1024*8 бит
#1Гбайт = 1024Мбайт = 1024*1024 Кбайт = 1024*1024*1024 байт = 1024*1024*1024*8 бит
#I - вес всего изображения  I = K*i
# K - количество пикселей ( два перемноженных числа в размере изображения)
# i - вес одного пикселя в битах
# N - количество цветов  N = 2^i ( N = 2**i) два в степени i
# I = K*i
# N = 2^i ( N = 2**i) два в степени i

#9
# I -вес всего пароля
# K - количество символов в пароле
# i - вес одного символа в битах
# N - количество символов в алфавите
# I = K*i
# N = 2^i ( N = 2**i) два в степени i
#Алгоритм:
#Определяем К - из скольких символов состоит пароль
#Определяем N - какие символы используем/алфавит/ из какого набора взяты символы ПИШЕМ КОЛИЧЕСТВО
#Определяем i - вес одного символа в битах N = 2^i (подбираем степень двойки так, чтобы туда уместилось число N)
#Определяем I - вес всего пароля в битах K*i. Потом переводим в байты - делим число на 8, если есть остаток всегда берем в большую сторону
# Если нам нужно узнать количество паролей, то мы выделенный вес переводим в байты, делим его на I в байтах, если есть остаток округляем в меньшую

#10
"""
s='3'*6 + '4'*75
while ('35' in s) or ('355' in s) or ('3444' in s):
    if ('35' in s):
        s=s.replace('35','4',1)
    else:
        if ('355' in s):
            s = s.replace('355', '4', 1)
        else:
            s = s.replace('3444', '3', 1)
print(s)"""

#11

#перевод в десятичную из любой: пример с 7 системой счисления
# n = int('5342',7) перведет 5342 из 7 всегда в 10
#перевод из десятичной в любую другую < 10
"""
n=1782628 #десятичное число
q= 5 #система счисления
s=''
while n>0:
    c=str(n%q)
    s=c+s
    n=n//q
print(s) #переведенное число"""
# из демо
"""
for x in '0123456789AB':
    a= int('154'+x+'3',12)
    b= int( '1'+x+'365',12)
    if (a+b)%13==0:
        print((a+b)//13)
"""
# #12
"""
f=open('полное имя файла')
s=f.readlines()
f.close()
for i in range(len(s)):
    s[i]=int(s[i])
#Находим число которое участвует в условии перебора пар
mn=1000000000000000000 # минимум 
for i in range(len(s)):
    if s[i]%15!=0:
        mn=min(mn,s[i])
#Перебор пар
k=0
mxsm=-10000000000000 # максимум
for i in range(len(s)-1):
    if s[i]%mn==0 and s[i+1]%mn==0:
        k+=1
        mxsn=max(mxsm, s[i]+s[i+1])
print(k, mxsm)
"""
"""
f=open('17 (2).txt')
s=f.readlines()
f.close()
print(s)
s= list(map(int,s))
print(s)
k=0
mx = -100000000000000
for i in range(0,len(s)-1):
    for j in range(i+1,len(s)):
        if (s[i] *s[j])%26 ==0:
            k+=1
            mx = max( mx, s[i]+s[j])
print(k,mx)
"""
### АЙТИ
#1 не работает, можно подисправить и мб зафурычит
"""
# Перевод числа 1011,01 из двоичной в десятичную
binary_num = "1011.01"
decimal_num_1 = int(binary_num, 2)

# Прибавление числа 24,6 из восьмеричной системы счисления
octal_num = "24.6"
decimal_num_2 = int(octal_num, 8)
result = decimal_num_1 + decimal_num_2

# Перевод ответа в шестнадцатеричную систему счисления
hex_num = hex(int(result))

print("Ответ: ", hex_num)
"""
#4
"""
for N in range(1,1000):
    R=bin(N)[2:]
    if N%2==0:
        R=R+'10'
    else:
        R='1'+R+'00'
    R=int(R,2)
    if R>107:
        print(N)"""
#5
"""
def single(n,d):
    f = '1' if n<0 else '0'
    n= str(abs(n))
    a,b= map(int,n.split('.'))
    a=bin(a)[2:]
    p=d + len(a)-1
    s=''
    b=float('0.'+ str(b))
    while b != int(b) and len(s)<23:
        b*=2
        s+= str(int(b))
        b-=int(b)
    p= bin(p)[2:]
    m = a[1:]+s
    m+= '0'*(23-len(m))
    r= f+p+m[:23]
    r= hex(int(r,2))[2:]
    r=r.upper()
    return r
print(single(186.75,d=127))
print(single(2045.113,d=127))
print(single(-8938.1122,d=127))"""
#6
#1Кбайт = 1024 байт = 1024*8 бит
#1Мбайт = 1024Кбайт = 1024*1024 байт = 1024*1024*8 бит
#1Гбайт = 1024Мбайт = 1024*1024 Кбайт = 1024*1024*1024 байт = 1024*1024*1024*8 бит
#I - вес всего изображения  I = K*i
# K - количество пикселей ( два перемноженных числа в размере изображения)
# i - вес одного пикселя в битах
# N - количество цветов  N = 2^i ( N = 2**i) два в степени i
# I = K*i
# N = 2^i ( N = 2**i) два в степени i

#9
# I -вес всего пароля
# K - количество символов в пароле
# i - вес одного символа в битах
# N - количество символов в алфавите
# I = K*i
# N = 2^i ( N = 2**i) два в степени i
#Алгоритм:
#Определяем К - из скольких символов состоит пароль
#Определяем N - какие символы используем/алфавит/ из какого набора взяты символы ПИШЕМ КОЛИЧЕСТВО
#Определяем i - вес одного символа в битах N = 2^i (подбираем степень двойки так, чтобы туда уместилось число N)
#Определяем I - вес всего пароля в битах K*i. Потом переводим в байты - делим число на 8, если есть остаток всегда берем в большую сторону
# Если нам нужно узнать количество паролей, то мы выделенный вес переводим в байты, делим его на I в байтах, если есть остаток округляем в меньшую

#10
"""
a= (~18 | (132>>2)) & (86<<1)
print(a)
"""
#11
"""
def f(a,b):
    if a==b:
        return 1
    if a>b:
        return 0
    if a==33:
        return 0
    return f(a+1,b) + f(a*2,b) + f(a*3,b)

print(f(3,15)*f(15,50))
"""

# #13
"""
f=open('полное имя файла')
s=f.readlines()
f.close()
for i in range(len(s)):
    s[i]=int(s[i])
#Находим число которое участвует в условии перебора пар
mn=1000000000000000000 # минимум 
for i in range(len(s)):
    if s[i]%15!=0:
        mn=min(mn,s[i])
#Перебор пар
k=0
mxsm=-10000000000000 # максимум
for i in range(len(s)-1):
    if s[i]%mn==0 and s[i+1]%mn==0:
        k+=1
        mxsn=max(mxsm, s[i]+s[i+1])
print(k, mxsm)
"""
"""
f=open('17 (2).txt')
s=f.readlines()
f.close()
print(s)
s= list(map(int,s))
print(s)
k=0
mx = -100000000000000
for i in range(0,len(s)-1):
    for j in range(i+1,len(s)):
        if (s[i] *s[j])%26 ==0:
            k+=1
            mx = max( mx, s[i]+s[j])
print(k,mx)
"""
